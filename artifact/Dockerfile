FROM nvcr.io/nvidia/nvhpc:22.9-devel-cuda_multi-ubuntu20.04

## Base package
RUN apt-get update
RUN apt-get install -y openssl wget git automake autoconf libtool pkg-config \
    libgmp3-dev libyaml-dev gcc g++ zlib1g-dev libtinfo-dev emacs less

## Racket
RUN wget https://download.racket-lang.org/releases/8.6/installers/racket-8.6-src-builtpkgs.tgz
RUN tar xvf racket-8.6-src-builtpkgs.tgz && cd racket-8.6/src && ./configure \
    && make -j && make -j install

## Omni Compiler
RUN wget https://omni-compiler.org/download/nightly/2022/omnicompiler-20220809.tar.bz2
RUN apt-get install -y flex gfortran openjdk-8-jdk libopenmpi-dev openmpi-bin \
    libxml2-dev make perl build-essential curl

# Newer Bison is required
RUN wget http://ftp.gnu.org/gnu/bison/bison-3.8.tar.gz
RUN tar xvf bison-*.tar.gz && cd bison-* \
    && ./configure && make -j && make -j install

RUN tar xvf omnicompiler-*.tar.bz2

RUN cd omnicompiler-* \
    && curl -o buildutils/config.guess 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD' \
    && chmod +x buildutils/config.guess \
    && ./configure && make -j && make -j install

## Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | bash -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

RUN apt-get install -y coinor-cbc coinor-libcbc-dev

## Racket Package
ENV PATH="/racket-8.6/bin:${PATH}"
RUN raco pkg install sxml

## Apply patch to egg
RUN cd / && cargo new playground
WORKDIR /playground
ADD rewriter/Cargo.toml /playground/Cargo.toml
RUN cargo build
RUN cargo build --release
WORKDIR /

RUN echo LS0tIHJ1bi5ycwkxOTczLTExLTI5IDIxOjMzOjA5LjAwMDAwMDAwMCArMDAwMAorKysgcnVuLm1vZC5ycwkyMDIyLTExLTAxIDE0OjU4OjExLjQwNjQzNTg3OSArMDAwMApAQCAtNTg4LDggKzU4OCw4IEBACiAKICAgICAgICAgbGV0IGNhbl9iZV9zYXR1cmF0ZWQgPSBhcHBsaWVkLmlzX2VtcHR5KCkKICAgICAgICAgICAgICYmIHNlbGYuc2NoZWR1bGVyLmNhbl9zdG9wKGkpCi0gICAgICAgICAgICAmJiAoZWdyYXBoX25vZGVzID09IGVncmFwaF9ub2Rlc19hZnRlcl9ob29rcykKLSAgICAgICAgICAgICYmIChlZ3JhcGhfY2xhc3NlcyA9PSBlZ3JhcGhfY2xhc3Nlc19hZnRlcl9ob29rcyk7CisgICAgICAgICAgICAmJiAoZWdyYXBoX25vZGVzID09IHNlbGYuZWdyYXBoLnRvdGFsX3NpemUoKSkKKyAgICAgICAgICAgICYmIChlZ3JhcGhfY2xhc3NlcyA9PSBzZWxmLmVncmFwaC5udW1iZXJfb2ZfY2xhc3NlcygpKTsKIAogICAgICAgICBpZiBjYW5fYmVfc2F0dXJhdGVkIHsKICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5hbmQoRXJyKFN0b3BSZWFzb246OlNhdHVyYXRlZCkpCg== \
    | base64 -d > run.rs.patch
RUN echo MjE0LDIxN2MyMTcsMjM1CjwgICAgIGVudW0gQ29sb3Igewo8ICAgICAgICAgV2hpdGUsCjwgICAgICAgICBHcmF5LAo8ICAgICAgICAgQmxhY2ssCi0tLQo+ICAgICBsZXQgbXV0IHBlbmRpbmc6IEhhc2hNYXA8SWQsIFZlYzwoSWQsIHVzaXplKT4+ID0gSGFzaE1hcDo6ZGVmYXVsdCgpOwo+IAo+ICAgICBsZXQgbXV0IG9yZGVyOiBIYXNoTWFwPElkLCB1c2l6ZT4gPSBIYXNoTWFwOjpkZWZhdWx0KCk7Cj4gCj4gICAgIGxldCBtdXQgbWVtbzogSGFzaE1hcDwoSWQsIHVzaXplKSwgYm9vbD4gPSBIYXNoTWFwOjpkZWZhdWx0KCk7Cj4gCj4gICAgIGxldCBtdXQgc3RhY2s6IFZlYzwoSWQsIHVzaXplKT4gPSB2ZWMhW107Cj4gCj4gICAgIGZvciBjbGFzcyBpbiBlZ3JhcGguY2xhc3NlcygpIHsKPiAgICAgICAgIGxldCBpZCA9IGNsYXNzLmlkOwo+ICAgICAgICAgZm9yIChpLCBub2RlKSBpbiBlZ3JhcGhbaWRdLml0ZXIoKS5lbnVtZXJhdGUoKSB7Cj4gICAgICAgICAgICAgZm9yICZjaGlsZCBpbiBub2RlLmNoaWxkcmVuKCkgewo+ICAgICAgICAgICAgICAgICBwZW5kaW5nLmVudHJ5KGNoaWxkKS5vcl9pbnNlcnRfd2l0aChWZWM6Om5ldykucHVzaCgoaWQsIGkpKTsKPiAgICAgICAgICAgICB9Cj4gCj4gICAgICAgICAgICAgaWYgbm9kZS5pc19sZWFmKCkgewo+ICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKChpZCwgaSkpOwo+ICAgICAgICAgICAgIH0KPiAgICAgICAgIH0KMjE5ZDIzNgo8ICAgICB0eXBlIEVudGVyID0gYm9vbDsKMjIxLDIyMmMyMzgsMjQzCjwgICAgIGxldCBtdXQgY29sb3I6IEhhc2hNYXA8SWQsIENvbG9yPiA9IGVncmFwaC5jbGFzc2VzKCkubWFwKHxjfCAoYy5pZCwgQ29sb3I6OldoaXRlKSkuY29sbGVjdCgpOwo8ICAgICBsZXQgbXV0IHN0YWNrOiBWZWM8KEVudGVyLCBJZCk+ID0gZWdyYXBoLmNsYXNzZXMoKS5tYXAofGN8ICh0cnVlLCBjLmlkKSkuY29sbGVjdCgpOwotLS0KPiAgICAgbGV0IG11dCBjb3VudCA9IDA7Cj4gCj4gICAgIHdoaWxlIGxldCBTb21lKChpZCwgaSkpID0gc3RhY2sucG9wKCkgewo+ICAgICAgICAgaWYgbWVtby5nZXQoJihpZCwgaSkpLmlzX3NvbWUoKSB7Cj4gICAgICAgICAgICAgY29udGludWU7Cj4gICAgICAgICB9CjIyNCwyMzRjMjQ1LDI1NQo8ICAgICB3aGlsZSBsZXQgU29tZSgoZW50ZXIsIGlkKSkgPSBzdGFjay5wb3AoKSB7CjwgICAgICAgICBpZiBlbnRlciB7CjwgICAgICAgICAgICAgKmNvbG9yLmdldF9tdXQoJmlkKS51bndyYXAoKSA9IENvbG9yOjpHcmF5Owo8ICAgICAgICAgICAgIHN0YWNrLnB1c2goKGZhbHNlLCBpZCkpOwo8ICAgICAgICAgICAgIGZvciAoaSwgbm9kZSkgaW4gZWdyYXBoW2lkXS5pdGVyKCkuZW51bWVyYXRlKCkgewo8ICAgICAgICAgICAgICAgICBmb3IgY2hpbGQgaW4gbm9kZS5jaGlsZHJlbigpIHsKPCAgICAgICAgICAgICAgICAgICAgIG1hdGNoICZjb2xvcltjaGlsZF0gewo8ICAgICAgICAgICAgICAgICAgICAgICAgIENvbG9yOjpXaGl0ZSA9PiBzdGFjay5wdXNoKCh0cnVlLCAqY2hpbGQpKSwKPCAgICAgICAgICAgICAgICAgICAgICAgICBDb2xvcjo6R3JheSA9PiBmKGlkLCBpKSwKPCAgICAgICAgICAgICAgICAgICAgICAgICBDb2xvcjo6QmxhY2sgPT4gKCksCjwgICAgICAgICAgICAgICAgICAgICB9Ci0tLQo+ICAgICAgICAgbGV0IG5vZGUgPSAmZWdyYXBoW2lkXS5ub2Rlc1tpXTsKPiAgICAgICAgIGxldCBtdXQgdXBkYXRlID0gZmFsc2U7Cj4gCj4gICAgICAgICBpZiBub2RlLmlzX2xlYWYoKSB7Cj4gICAgICAgICAgICAgdXBkYXRlID0gdHJ1ZTsKPiAgICAgICAgIH0gZWxzZSBpZiBub2RlLmNoaWxkcmVuKCkuaXRlcigpLmFsbCh8Jnh8IG9yZGVyLmdldCgmeCkuaXNfc29tZSgpKSB7Cj4gICAgICAgICAgICAgaWYgbGV0IFNvbWUob3JkKSA9IG9yZGVyLmdldCgmaWQpIHsKPiAgICAgICAgICAgICAgICAgdXBkYXRlID0gbm9kZS5jaGlsZHJlbigpLml0ZXIoKS5hbGwofCZ4fCBvcmRlci5nZXQoJngpLnVud3JhcCgpIDwgb3JkKTsKPiAgICAgICAgICAgICAgICAgaWYgIXVwZGF0ZSB7Cj4gICAgICAgICAgICAgICAgICAgICBtZW1vLmluc2VydCgoaWQsIGkpLCBmYWxzZSk7Cj4gICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKMjM1YTI1NywyODAKPiAgICAgICAgICAgICB9IGVsc2Ugewo+ICAgICAgICAgICAgICAgICB1cGRhdGUgPSB0cnVlOwo+ICAgICAgICAgICAgIH0KPiAgICAgICAgIH0KPiAKPiAgICAgICAgIGlmIHVwZGF0ZSB7Cj4gICAgICAgICAgICAgaWYgb3JkZXIuZ2V0KCZpZCkuaXNfbm9uZSgpIHsKPiAgICAgICAgICAgICAgICAgb3JkZXIuaW5zZXJ0KGlkLCBjb3VudCk7Cj4gICAgICAgICAgICAgICAgIGNvdW50ID0gY291bnQgKyAxOwo+ICAgICAgICAgICAgIH0KPiAgICAgICAgICAgICBtZW1vLmluc2VydCgoaWQsIGkpLCB0cnVlKTsKPiAgICAgICAgICAgICBpZiBsZXQgU29tZShtdXQgdikgPSBwZW5kaW5nLnJlbW92ZSgmaWQpIHsKPiAgICAgICAgICAgICAgICAgc3RhY2suYXBwZW5kKCZtdXQgdik7Cj4gICAgICAgICAgICAgICAgIHN0YWNrLnNvcnQoKTsKPiAgICAgICAgICAgICAgICAgc3RhY2suZGVkdXAoKTsKPiAgICAgICAgICAgICB9Owo+ICAgICAgICAgfQo+ICAgICB9Cj4gCj4gICAgIGZvciBjbGFzcyBpbiBlZ3JhcGguY2xhc3NlcygpIHsKPiAgICAgICAgIGxldCBpZCA9IGNsYXNzLmlkOwo+ICAgICAgICAgZm9yIChpLCBub2RlKSBpbiBlZ3JhcGhbaWRdLml0ZXIoKS5lbnVtZXJhdGUoKSB7Cj4gICAgICAgICAgICAgaWYgbGV0IFNvbWUodHJ1ZSkgPSBtZW1vLmdldCgmKGlkLCBpKSkgewo+ICAgICAgICAgICAgICAgICBjb250aW51ZTsKMjM3LDIzOGMyODIKPCAgICAgICAgIH0gZWxzZSB7CjwgICAgICAgICAgICAgKmNvbG9yLmdldF9tdXQoJmlkKS51bndyYXAoKSA9IENvbG9yOjpCbGFjazsKLS0tCj4gICAgICAgICAgICAgZihpZCwgaSk7Cg== \
    | base64 -d > lp_extract.rs.patch
RUN patch ~/.cargo/registry/src/github.com-*/egg-*/src/run.rs < run.rs.patch
RUN patch ~/.cargo/registry/src/github.com-*/egg-*/src/lp_extract.rs < lp_extract.rs.patch

## ENV for stencil bench
ENV CAPABILITY=80
ENV CUDAHOME=/opt/nvidia/hpc_sdk/Linux_x86_64/22.9/cuda/11.7

## LLVM with CUDA
RUN apt-get install -y xz-utils ninja-build cmake pkg-config libelf-dev libffi-dev libelf-dev libelf1
RUN git clone --depth 1 --branch llvmorg-15.0.3 https://github.com/llvm/llvm-project.git
ENV CC=gcc
ENV CXX=g++

RUN mkdir /llvm-project/build
WORKDIR /llvm-project/build
RUN cmake -S ../llvm -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS='clang;openmp' -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=sm_80 -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=80 -DLLVM_TARGETS_TO_BUILD='ARM;X86;AArch64;NVPTX'
RUN cmake --build .
RUN mkdir /llvm-project/build2
WORKDIR /llvm-project/build2
RUN CC=../build/bin/clang CXX=../build/bin/clang++ cmake -S ../llvm -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS='clang;openmp' -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=sm_80 -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES=80 -DLLVM_TARGETS_TO_BUILD='ARM;X86;AArch64;NVPTX'
RUN cmake --build .
RUN cmake --build . --target install
WORKDIR /

## GCC with OpenACC/GPU
RUN wget https://ftp.gnu.org/gnu/gcc/gcc-12.2.0/gcc-12.2.0.tar.gz
RUN tar xvf gcc-*.tar.gz && mv gcc-12.2.0 gcc
RUN git clone git://sourceware.org/git/newlib-cygwin.git nvptx-newlib
RUN cd nvptx-newlib && git reset --hard 8c68a8a4898f2607bf940716dbce5654f10c481b
RUN cd gcc && contrib/download_prerequisites
RUN ln -s /nvptx-newlib/newlib gcc/newlib

ENV CUDA_HOME=$CUDAHOME
RUN git clone https://github.com/MentorEmbedded/nvptx-tools
RUN cd nvptx-tools && git reset --hard 472b6e78b3ba918d727698f79911360b7c808247
RUN cd nvptx-tools && ./configure --with-cuda-driver-include=$CUDA_HOME/include \
    --with-cuda-driver-lib=$CUDA_HOME/lib64 && make -j && make -j install

RUN cp omnicompiler-*/buildutils/config.guess gcc/
RUN mkdir gcc/build-nvptx-gcc
WORKDIR /gcc/build-nvptx-gcc
RUN export CC=gcc CXX=g++ \
    && export LIBRARY_PATH=$(echo $LIBRARY_PATH | sed -e 's/:*$//') \
    && export LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH | sed -e 's/:*$//') \
    && ../configure --target=nvptx-none \
    --with-build-time-tools=/usr/local/bin \
    --enable-as-accelerator-for=$(/gcc/config.guess) \
    --disable-sjlj-exceptions --enable-newlib-io-long-long \
    --enable-languages="c,c++,fortran,lto" \
    && make -j && make -j install

RUN rm -f /usr/local/lib/gcc/nvptx-none/12.2.0/include/ISO_Fortran_binding.h

RUN mkdir /gcc/build-host-gcc
WORKDIR /gcc/build-host-gcc
RUN export CC=gcc CXX=g++ \
    && export LIBRARY_PATH=$CUDA_HOME/lib64/stubs:$LIBRARY_PATH \
    && export LIBRARY_PATH=$(echo $LIBRARY_PATH | sed -e 's/:*$//') \
    && export LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH | sed -e 's/:*$//') \
    && ../configure --enable-offload-targets=nvptx-none \
    --with-cuda-driver-include=$CUDA_HOME/include \
    --with-cuda-driver-lib=$CUDA_HOME/lib64 \
    --disable-bootstrap \
    --disable-multilib \
    --enable-languages="c,c++,fortran,lto" \
    && make -j && make -j install

WORKDIR /
RUN echo ulimit -s unlimited >> ~/.bashrc

RUN echo LS0tIC9vbW5pY29tcGlsZXItMjAyMjA4MDkvWGNvZGVNTC1FeGMtVG9vbHMvc3JjL2V4Yy94Y29kZW1sL1htY1hvYmplY3RUb1hjb2RlVHJhbnNsYXRvci5qYXZhCTIwMjItMDgtMDkgMTQ6NTU6MDYuMDAwMDAwMDAwICswMDAwCisrKyBYbWNYb2JqZWN0VG9YY29kZVRyYW5zbGF0b3IuamF2YQkyMDIyLTExLTE3IDAwOjAwOjMxLjA0MDU2MjYzMCArMDAwMApAQCAtMTAyNSw3ICsxMDI1LDcgQEAKIAkJCSAgICBlbHNlIHsKIAkJCSAgICAgIEVsZW1lbnQgZzEgPSBjcmVhdGVFbGVtZW50KCJsaXN0Iik7CiAJCQkgICAgICBmb3IgKFhvYmplY3QgYiA6IChYb2JqTGlzdCl2YXJzKXsKLQkJCQlhZGRDaGlsZE5vZGUoZzEsIHRyYW5zKGIpKTsKKwkJCQlhZGRDaGlsZE5vZGUoZzEsIHRyYW5zQUNDUHJhZ21hVmFyT3JBcnJheShiKSk7CiAJCQkgICAgICB9CiAJCQkgICAgICBhZGRDaGlsZE5vZGUoZywgZzEpOwogCQkJICAgIH0KQEAgLTEyNDksMTEgKzEyNDksMTEgQEAKIAkgICAgRWxlbWVudCBhcnJheSA9IGNyZWF0ZUVsZW1lbnQoImxpc3QiKTsKIAkgICAgZm9yIChYb2JqZWN0IGRpbSA6IChYb2JqTGlzdCl4KXsKIAkJaWYoZGltLk9wY29kZSgpICE9IFhjb2RlLkxJU1QpewotCQkgICAgYWRkQ2hpbGROb2RlKGFycmF5LCB0cmFucyhkaW0pKTsKKwkJICAgIGFkZENoaWxkTm9kZShhcnJheSwgdHJhbnNBQ0NQcmFnbWFWYXJPckFycmF5KGRpbSkpOwogCQl9ZWxzZXsKIAkJICAgIEVsZW1lbnQgcmFuZ2UgPSBjcmVhdGVFbGVtZW50KCJsaXN0Iik7CiAJCSAgICBmb3IoWG9iamVjdCBqIDogKFhvYmpMaXN0KWRpbSl7Ci0JCQlhZGRDaGlsZE5vZGUocmFuZ2UsIHRyYW5zKGopKTsKKwkJCWFkZENoaWxkTm9kZShyYW5nZSwgdHJhbnNBQ0NQcmFnbWFWYXJPckFycmF5KGopKTsKIAkJICAgIH0KIAkJICAgIGFkZENoaWxkTm9kZShhcnJheSwgcmFuZ2UpOwogCQl9Cg== \
    | base64 -d > XmcXobjectToXcodeTranslator.java.patch
RUN echo  \
    | base64 -d > XmcXcodeToXcTranslator.java.patch
RUN echo LS0tIC9vbW5pY29tcGlsZXItMjAyMjA4MDkveGNvZGVtbC10b29scy9DLUJhY2tFbmQvc3JjL3hjb2RlbWwvYy9kZWNvbXBpbGUvWGNEaXJlY3RpdmVPYmouamF2YQkyMDIyLTA4LTA5IDE0OjU1OjA5LjAwMDAwMDAwMCArMDAwMAorKysgL3dvcmsvWGNEaXJlY3RpdmVPYmouamF2YQkyMDIyLTExLTE3IDA1OjE1OjQ5LjgwMzc5OTQ5NiArMDAwMApAQCAtOSw3ICs5LDcgQEAKICAqIEludGVybmFsIG9iamVjdCByZXByZXNlbnRzIGZvbGxvd2luZyBlbGVtZW50czoKICAqICAgcHJhZ21hLCB0ZXh0LCBzdGF0ZW1lbnQKICAqLwotcHVibGljIGNsYXNzIFhjRGlyZWN0aXZlT2JqIGV4dGVuZHMgWGNTdG10T2JqIGltcGxlbWVudHMgWGNEZWNBbmREZWZPYmosIFhjRXhwck9iagorcHVibGljIGNsYXNzIFhjRGlyZWN0aXZlT2JqIGV4dGVuZHMgWGNTdG10T2JqIGltcGxlbWVudHMgWGNEZWNBbmREZWZPYmoKIHsKICAgICBwcml2YXRlIFN0cmluZyBfbGluZTsKICAgICBwcml2YXRlIFhjU3RtdE9iaiBfc3RtdCA9IG51bGw7Cg== \
    | base64 -d > XcDirectiveObj.java.patch

RUN patch /omnicompiler-*/XcodeML-Exc-Tools/src/exc/xcodeml/XmcXobjectToXcodeTranslator.java < XmcXobjectToXcodeTranslator.java.patch
RUN patch /omnicompiler-*/xcodeml-tools/C-BackEnd/src/xcodeml/c/util/XmcXcodeToXcTranslator.java < XmcXcodeToXcTranslator.java.patch
RUN patch /omnicompiler-*/xcodeml-tools/C-BackEnd/src/xcodeml/c/decompile/XcDirectiveObj.java < XcDirectiveObj.java.patch

RUN cd /omnicompiler-* && make -j install

## Plot Generation
RUN apt-get update
RUN apt-get install -y python3-pip texlive texlive-latex-extra texlive-fonts-recommended dvipng cm-super texlive-fonts-extra
RUN pip3 install -U matplotlib seaborn

## ACCSAT
WORKDIR /root/
# COPY acc-saturator /root/acc-saturator
RUN git clone https://github.com/khaki3/acc-saturator.git
RUN cd acc-saturator && make

## Benchmarks
COPY openacc-npb /root/openacc-npb
COPY spec-accel /root/spec-accel
